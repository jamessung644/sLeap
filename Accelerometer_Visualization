//
//  ContentView.swift
//  sLeap Watch App
//  Accelerometer_Visualization
//
//  Created by 성수한 on 2023/05/12.
//

import SwiftUI
import CoreMotion
import WatchConnectivity

struct ContentView: View {
    @State private var acceleration = (x: 0.0, y: 0.0, z: 0.0)
    @State private var motionManager = CMMotionManager()
    @State private var wcSession = WCSession.default

    var body: some View {
        VStack {
            Text("Acceleration")
            Text("X: \(acceleration.x, specifier: "%.2f")\nY: \(acceleration.y, specifier: "%.2f")\nZ: \(acceleration.z, specifier: "%.2f")")
        }
        .onAppear {
            startAccelerometerUpdates()
            setupWatchConnectivity()
        }
    }

    func startAccelerometerUpdates() {
        if motionManager.isAccelerometerAvailable {
            motionManager.accelerometerUpdateInterval = 1.0 / 60.0 // 60Hz
            motionManager.startAccelerometerUpdates(to: OperationQueue.main) { (data, error) in
                if let accelerometerData = data {
                    acceleration.x = accelerometerData.acceleration.x
                    acceleration.y = accelerometerData.acceleration.y
                    acceleration.z = accelerometerData.acceleration.z

                    print("acceleration.x: \(acceleration.x)")
                    print("acceleration.y: \(acceleration.y)")
                    print("acceleration.z: \(acceleration.z)")

                    sendAccelerationDataToPhone(x: acceleration.x, y: acceleration.y, z: acceleration.z)
                }
            }
        }
    }

    func setupWatchConnectivity() {
        if wcSession.activationState == .notActivated {
            wcSession.delegate = makeCoordinator()
            wcSession.activate()
        }
    }

    func sendAccelerationDataToPhone(x: Double, y: Double, z: Double) {
        let accelerationData: [String: Double] = [
            "x": x,
            "y": y,
            "z": z
        ]

        print("Sending acceleration data to phone...")
        wcSession.sendMessage(accelerationData, replyHandler: nil, errorHandler: nil)
    }

    func makeCoordinator() -> Coordinator {
        Coordinator(self)
    }

    class Coordinator: NSObject, WCSessionDelegate {
        var parent: ContentView

        init(_ parent: ContentView) {
            self.parent = parent
        }

        func session(_ session: WCSession, activationDidCompleteWith activationState: WCSessionActivationState, error: Error?) {
            // Add any necessary code
        }
    }

    func sendAccelerationDataToWatch(x: Double, y: Double, z: Double) {
            let accelerationData: [String: Double] = [
                "x": x,
                "y": y,
                "z": z
            ]

            print("Sending acceleration data to watch...")
            wcSession.sendMessage(accelerationData, replyHandler: { response in
                print("Message sent successfully: \(response)")
            }, errorHandler: { error in
                print("Error sending message: \(error.localizedDescription)")
            })
        }


}

struct ContentView_Previews: PreviewProvider {
    static var previews: some View {
        ContentView()
    }
}
